package com.artsquare.gallery.api.rest.v0;

import java.util.Collections;
import java.util.EnumSet;

import org.springframework.hateoas.Link;

import com.fasterxml.jackson.annotation.JsonValue;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

/**
 * Values representing the use cases for image assets. Copies of image originals are generated by the system automatically on
 * upload.
 *
 * @author Christopher Smith
 *
 */
public enum DisplayIntent {

	/**
	 * Inline image to be displayed as decoration on a content element, such as a comment.
	 */
	THUMBNAIL("ts", 64, 64, true),

	/**
	 * Thumbnail to be displayed on high-density output devices.
	 */
	THUMBNAIL_2X("tm", 128, 128, true),

	/**
	 * Image to be used for search or gallery tiles.
	 */
	TILE("tl", 192, 192, true),

	/**
	 * Image to be used for search or gallery tiles on high-density devices.
	 */
	TILE_2X("tx", 384, 384, true),

	/**
	 * Inline display suitable for a standard-density mobile device or search thumbnails.
	 */
	DISPLAY_SMALL("ds", 320, 480, true),

	/**
	 * Inline display suitable for a standard desktop or high-density mobile output device.
	 */
	DISPLAY_MEDIUM("dm", 960, 720, true),

	/**
	 * Inline display suitable for a large output device, such as a work page viewed on a desktop monitor.
	 */
	DISPLAY_LARGE("dl", 1920, 1080, true),

	/**
	 * Popout display suitable for a large output device, such as a full-screen view of a work. Visibly watermarked.
	 */
	LIGHTBOX("lb", 2560, 1440, false);

	private final String tag;

	private final Integer maxWidth;

	private final Integer maxHeight;

	private final boolean simpleScale;

	private DisplayIntent(String tag, Integer maxWidth, Integer maxHeight, boolean simpleScale) {
		this.tag = tag;
		this.maxWidth = maxWidth;
		this.maxHeight = maxHeight;
		this.simpleScale = simpleScale;
	}

	@JsonValue
	public String getTag() {
		return tag;
	}

	public Integer getMaxWidth() {
		return maxWidth;
	}

	public Integer getMaxHeight() {
		return maxHeight;
	}

	/**
	 * Whether this intent is just a scaled-down version of the original or other modifications
	 * (such as matting or watermarking) have been applied.
	 *
	 * @return {@code true} if this intent has had scaling but no other transforms applied
	 */
	public boolean isSimpleScale() {
	    return simpleScale;
	}

	public String applyTo(Link templatedLink) {
		return templatedLink.expand(Collections.singletonMap(DISPLAY_INTENT_URI_PARAMETER, this.tag)).getHref();
	}

	public static final String DISPLAY_INTENT_URI_PARAMETER="intent";

	public static final ImmutableMap<String, DisplayIntent> BY_TAG;

	public static final ImmutableSet<DisplayIntent> CURRENT_INTENTS = ImmutableSet
		.copyOf(EnumSet.complementOf(EnumSet.of(LIGHTBOX)));

	static {
		ImmutableMap.Builder<String, DisplayIntent> builder = ImmutableMap.builder();
		for (DisplayIntent intent : DisplayIntent.values())
			builder.put(intent.getTag(), intent);
		BY_TAG = builder.build();
	}

	public static DisplayIntent forTag(final String tag) {
		DisplayIntent di = BY_TAG.get(tag);
		if (di == null)
			throw new IllegalArgumentException("tag " + tag + " does not map to a known display intent");
		return di;
	}
}
